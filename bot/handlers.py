import asyncio
from aiogram import F, Router, types
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
import bot.keyboards as kb
from bot.favorites_manager import load_favorites, save_favorites
# from data.save_product import load_atb_products_from_csv, search_in_products
from config import logger
from collections import defaultdict
from data.db_manager import search_products_in_db

router = Router()




ALL_PRODUCTS_LIST = []
PRODUCTS_BY_ID = {}




@router.message(CommandStart())
async def cmd_start(message: Message):
    await message.reply(f"–ü—Ä–∏–≤—ñ—Ç!\n –î–∞–≤–∞–π –ø—Ä–æ–∑–ø–æ—á–Ω–µ–º–æ!\n –û–±–µ—Ä–∏ –º–∞–≥–∞–∑–∏–Ω:",
    reply_markup=kb.buttons)

@router.message(Command("profile"))
async def my_profile(message: Message):
    print(f"User {message.from_user.id} started the conversation.")
    await message.reply(
        f"–ü—Ä–∏–≤—ñ—Ç!\n–¢–≤—ñ–π ID:{message.from_user.id}\n–Ü–º—è: {message.from_user.first_name}",
    reply_markup=kb.settings)


@router.message(F.text == "help")
async def get_help(message: Message):
    await message.answer("–¶–µ –∫–æ–º–∞–Ω–¥–∞ /help")


@router.message(F.text == "–û–±—Ä–∞—Ç–∏ –º–∞–≥–∞–∑–∏–Ω")
async def how_are_you(message: Message):
    await message.answer("üîç", reply_markup=kb.shop)



@router.message(F.text == "–û–±—Ä–∞–Ω—ñ —Ç–æ–≤–∞—Ä–∏")
async def show_favorites(message: types.Message):
    user_id = str(message.from_user.id)
    favorites = load_favorites(user_id)

    if not favorites:
        await message.answer("üì≠ –£ –≤–∞—Å –Ω–µ–º–∞—î –æ–±—Ä–∞–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤.", reply_markup=kb.buttons)
        return

    await message.answer(f"üíñ –í–∞—à—ñ –æ–±—Ä–∞–Ω—ñ —Ç–æ–≤–∞—Ä–∏ ({len(favorites)}):")

    for fav_item in favorites:
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –¥–∞–Ω—ñ –±–µ–∑ –ø–æ—à—É–∫—É –≤ CSV
        message_text = (
            f"üì¶ <b>{fav_item['title']}</b>\n"
            f"üí∞ <b>{fav_item['price']} –≥—Ä–Ω</b>\n"
            f"üè¨ <b>{fav_item['tag_shop']}</b>\n"
        )

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ –∑ –æ–±—Ä–∞–Ω–∏—Ö",
                    callback_data=f"remove_{fav_item['product_id']}"
                )
            ]
        ])

        await message.answer(
            text=message_text,
            parse_mode="HTML",
            reply_markup=keyboard
        )


@router.callback_query(F.data.startswith("favorite_"))
async def add_to_favorites(callback: CallbackQuery):
    user_id = str(callback.from_user.id)
    product_id = callback.data.split("favorite_")[1]

    # –®—É–∫–∞—î–º–æ —Ç–æ–≤–∞—Ä –≤ –Ω–∞—à–æ–º—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ–º—É —Å–ª–æ–≤–Ω–∏–∫—É
    product_to_add = PRODUCTS_BY_ID.get(product_id)

    if not product_to_add:
        await callback.answer("–ü–æ–º–∏–ª–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return


    favorites = load_favorites(user_id)

    if not any(p.get("product_id") == product_id for p in favorites):
        favorites.append({
            "product_id": product_to_add['id'],
            "title": product_to_add['title'],
            "price": product_to_add['price'],
            "tag_shop": product_to_add['tag_shop'],
            "image_url": product_to_add['image_url']
        })
        save_favorites(user_id, favorites)
        await callback.answer(f"–¢–æ–≤–∞—Ä '{product_to_add['title'][:30]}...' –¥–æ–¥–∞–Ω–æ –¥–æ –æ–±—Ä–∞–Ω–∏—Ö!")
    else:
        await callback.answer("–¶–µ–π —Ç–æ–≤–∞—Ä –≤–∂–µ —î –≤ –æ–±—Ä–∞–Ω–∏—Ö")


@router.callback_query(F.data.startswith("remove_"))
async def remove_from_favorites(callback: CallbackQuery):
    user_id = str(callback.from_user.id)
    product_id = callback.data.split("remove_")[1]

    favorites = load_favorites(user_id)
    updated_favorites = [p for p in favorites if p["product_id"] != product_id]

    if len(updated_favorites) < len(favorites):
        save_favorites(user_id, updated_favorites)
        await callback.answer("–¢–æ–≤–∞—Ä –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –æ–±—Ä–∞–Ω–∏—Ö!")
        await callback.message.delete()
    else:
        await callback.answer("–¶—å–æ–≥–æ —Ç–æ–≤–∞—Ä—É –≤–∂–µ –Ω–µ–º–∞—î –≤ –æ–±—Ä–∞–Ω–∏—Ö")


@router.message(lambda message: message.text not in ["–û–±—Ä–∞—Ç–∏ –º–∞–≥–∞–∑–∏–Ω", "–û–±—Ä–∞–Ω—ñ —Ç–æ–≤–∞—Ä–∏"])
async def search_product(message: types.Message):
    query = message.text
    if len(query) < 3:
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∑–∞–ø–∏—Ç –¥–æ–≤–∂–∏–Ω–æ—é –Ω–µ –º–µ–Ω—à–µ 3 —Å–∏–º–≤–æ–ª—ñ–≤.")
        return

    results = search_products_in_db(query)

    if not results:
        await message.answer(f"–ù–∞ –∂–∞–ª—å, –∑–∞ –∑–∞–ø–∏—Ç–æ–º '{query}' –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    # –ì—Ä—É–ø—É—î–º–æ —Ç–æ–≤–∞—Ä–∏ –∑–∞ –Ω–∞–∑–≤–æ—é. defaultdict(list) - –¥—É–∂–µ –∑—Ä—É—á–Ω–∞ —Ä—ñ—á –¥–ª—è —Ü—å–æ–≥–æ
    grouped_products = defaultdict(list)
    for product in results:
        # –¢—É—Ç –º–æ–∂–Ω–∞ –∑–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ —â–µ –∫—Ä–∞—â—É –ª–æ–≥—ñ–∫—É –≥—Ä—É–ø—É–≤–∞–Ω–Ω—è,
        # –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –ø–æ –ø–µ—Ä—à–∏—Ö 2-3 —Å–ª–æ–≤–∞—Ö –Ω–∞–∑–≤–∏
        key = ' '.join(product['normalized_title'].split()[:3])
        grouped_products[key].append(product)

    await message.answer(f"üîç –ó–Ω–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑–∞ –∑–∞–ø–∏—Ç–æ–º '{query}':")

    response_text = ""
    for group_key, products_in_group in grouped_products.items():
        # –ë–µ—Ä–µ–º–æ –Ω–∞–π–ø–æ–≤–Ω—ñ—à—É –Ω–∞–∑–≤—É –∑ –≥—Ä—É–ø–∏ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
        title_for_display = sorted(products_in_group, key=lambda x: len(x['title']), reverse=True)[0]['title']
        response_text += f"\nüõí <b>{title_for_display}</b>\n"

        # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ —Ü—ñ–Ω–æ—é, —â–æ–± –ø–æ–∫–∞–∑–∞—Ç–∏ –Ω–∞–π–¥–µ—à–µ–≤—à—É –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é –ø–µ—Ä—à–æ—é
        for product in sorted(products_in_group, key=lambda x: x['price']):
            response_text += f"  - <b>{product['tag_shop']}</b>: {product['price']:.2f} –≥—Ä–Ω\n"

        # –©–æ–± –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –±—É–ª–æ –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–º
        if len(response_text) > 3500:
            await message.answer(response_text, parse_mode="HTML")
            response_text = ""

    if response_text:
        await message.answer(response_text, parse_mode="HTML")


@router.callback_query(F.data.startswith("shop-atb"))
async def show_products(callback: CallbackQuery):
    await callback.answer()

    parts = callback.data.split("-")
    offset = int(parts[2]) if len(parts) == 3 else 0
    step = 5
    products_to_show = [p for p in ALL_PRODUCTS_LIST if p['tag_shop'] == '–ê–¢–ë-–ú–∞—Ä–∫–µ—Ç']
    current_batch = products_to_show[offset:offset + step]

    try:
        if not current_batch:
            await callback.message.answer("–ë—ñ–ª—å—à–µ —Ç–æ–≤–∞—Ä—ñ–≤ –Ω–µ–º–∞—î.")
            return

        for product in current_batch:  # 'product' - —Ü–µ –°–õ–û–í–ù–ò–ö
            # --- –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø –¢–£–¢: –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –¥–æ—Å—Ç—É–ø –∑–∞ –∫–ª—é—á–µ–º ['key'] ---

            # –ù–∞–∑–≤–∞ –¥–ª—è callback_data - –ø—Ä–æ—Å—Ç–æ ID, –≤—ñ–Ω –≤–∂–µ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π
            product_id = product['id']
            product_title = product['title']
            product_price = product['price']
            product_old_price = product['old_price']
            product_date = product['date']
            product_image = product['image_url']
            product_shop = product['tag_shop']

            caption = f"üè∑Ô∏è  <b>{product_title}</b>\n\n"
            caption += f"üí∞ <b>{product_price} –≥—Ä–Ω</b>{' ' * 20}<s>üìâ{product_old_price} –≥—Ä–Ω</s>\n\n"
            caption += f"<i>üìÖ  {product_date} </i>"

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üíñ –î–æ–¥–∞—Ç–∏ –≤ –æ–±—Ä–∞–Ω–µ",
                        callback_data=f"favorite_{product_id}"  # –ü–µ—Ä–µ–¥–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ ID
                    )
                ]
            ])

            logger.info(f"–ü–æ–∫–∞–∑—É—î–º–æ: {product_title}, {product_price}, {product_shop}")

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∏ —ñ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ
            if product_image:
                await callback.message.answer_photo(
                    photo=product_image,
                    caption=caption,
                    parse_mode="HTML",
                    reply_markup=keyboard
                )
            else:
                await callback.message.answer(
                    text=caption,
                    parse_mode="HTML",
                    reply_markup=keyboard
                )
            await asyncio.sleep(0.3)  # –ú–æ–∂–Ω–∞ —Ç—Ä–æ—Ö–∏ –∑–º–µ–Ω—à–∏—Ç–∏ –∑–∞—Ç—Ä–∏–º–∫—É

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —î —â–µ —Ç–æ–≤–∞—Ä–∏ –¥–ª—è –ø–æ–∫–∞–∑—É
        if offset + step < len(products_to_show):
            next_offset = offset + step
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="‚¨áÔ∏è –ü–æ–∫–∞–∑–∞—Ç–∏ —â–µ",
                    callback_data=f"shop-atb-{next_offset}"
                )]
            ])
            await callback.message.answer(text="‚¨áÔ∏è –©–µ —Ç–æ–≤–∞—Ä–∏:", reply_markup=keyboard)

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ —É show_products: {e}", exc_info=True)
        await callback.message.answer("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ç–æ–≤–∞—Ä–∏.")


